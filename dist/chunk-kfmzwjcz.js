import{e as n,h as a}from"/dist/chunk-n2t7x54v.js";function e(){return a("div",{class:"markdown-body",children:a(n,{children:[a("h1",{children:"预览 Sycamore 全新的响应式原语"},void 0,!1,void 0,this),`
`,a("p",{children:[a("a",{href:"https://github.com/sycamore-rs/sycamore/blob/master/_docs/posts/new-reactive-primitives.md",children:"原文"},void 0,!1,void 0,this),"，机翻 + 个人修订"]},void 0,!0,void 0,this),`
`,a("blockquote",{children:[`
`,a("p",{children:"2022 年 05 月 01 日更新，sycamore 0.8.0-beta.4 对响应式 API 又做了修改。"},void 0,!1,void 0,this),`
`]},void 0,!0,void 0,this),`
`,a("p",{children:a("em",{children:"下一版本的 Sycamore 如何拥抱更好的开发体验"},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("p",{children:"Sycamore 是一个基于 Rust、WebAssembly 技术开发的 Rust 同构 Web 应用的库。"},void 0,!1,void 0,this),`
`,a("p",{children:["Sycamore 的核心是构建在响应式原语之上。这些原语会追踪数据（状态）的变化并通知到系统。最为基本的原语就是 ",a("code",{children:"Signal"},void 0,!1,void 0,this),"。"]},void 0,!0,void 0,this),`
`,a("p",{children:"因为 Sycamore 中的所有内容都与它的响应式系统相关联，这使我们能够使用更简单的声明式 API 和组件渲染模型。在 React Hooks 中，函数组件每次状态变化都需要重新执行；而 Sycamore 的组件只会执行一次。在 Sycamore 中用于创建组件的函数更像是组件的 Builder，其他部分则由响应式系统则负责。"},void 0,!1,void 0,this),`
`,a("p",{children:["也就是说在 Sycamore 中不需要重新执行全部组件函数，只需要重新计算数据发生了变化的组件函数。我们通过 Rust 的闭包实现这个功能。但是开发体验却成了主要的问题——",a("code",{children:"Signal"},void 0,!1,void 0,this)," 只实现了 ",a("code",{children:"Clone"},void 0,!1,void 0,this)," 无法实现 ",a("code",{children:"Copy"},void 0,!1,void 0,this),"。如果需要将 ",a("code",{children:"Signal"},void 0,!1,void 0,this)," 放到一个闭包使用时，都需要先 ",a("code",{children:"Clone"},void 0,!1,void 0,this),"，然后才能 move 到闭包中。"]},void 0,!0,void 0,this),`
`,a("pre",{className:"shiki github-dark",style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0",children:a("code",{className:"language-rust",children:[a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"let"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" data "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:" Signal"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"::"},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"new"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"("},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"..."},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:");"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"let"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" callback "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" {"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"    let"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" data "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" data"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"."},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"clone"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"(); "},void 0,!1,void 0,this),a("span",{style:{color:"#6A737D"},children:"// 先 Clone 一次"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"    move"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:" ||"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" {"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#6A737D"},children:"        // 处理 `data` 中的数据"},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#E1E4E8"},children:"    }"},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#E1E4E8"},children:"}"},void 0,!1,void 0,this)},void 0,!1,void 0,this)]},void 0,!0,void 0,this)},void 0,!1,void 0,this),`
`,a("p",{children:["作为折衷，我们提供了 ",a("code",{children:"cloned!"},void 0,!1,void 0,this)," 宏来减少这些形式化的代码，显然这不是最好的方案。"]},void 0,!0,void 0,this),`
`,a("pre",{className:"shiki github-dark",style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0",children:a("code",{className:"language-rust",children:[a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"let"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" data "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:" Signal"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"::"},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"new"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"("},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"..."},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:");"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"let"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" callback "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:" cloned!"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"(data "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"=>"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:" move"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:" ||"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" { "},void 0,!1,void 0,this),a("span",{style:{color:"#6A737D"},children:"// `cloned!` 宏会展示为上面的形式代码"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#6A737D"},children:"    // 处理 `data` 中的数据"},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#E1E4E8"},children:"})"},void 0,!1,void 0,this)},void 0,!1,void 0,this)]},void 0,!0,void 0,this)},void 0,!1,void 0,this),`
`,a("p",{children:[a("code",{children:"Cloned!"},void 0,!1,void 0,this)," 宏虽然能用但是不好用！在 Sycamore，",a("code",{children:"view!"},void 0,!1,void 0,this)," 宏用来描述 UI，如同 JSX 之于 React。问题是一旦在 ",a("code",{children:"view!"},void 0,!1,void 0,this)," 宏中使用动态数据都需要包裹一层闭包。例如下面的代码，实际上是不能执行："]},void 0,!0,void 0,this),`
`,a("pre",{className:"shiki github-dark",style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0",children:a("code",{className:"language-rust",children:[a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"let"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" data "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:" Signal"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"::"},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"new"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"("},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"..."},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:");"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#B392F0"},children:"view!"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" {"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#E1E4E8"},children:"    p { (data"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"."},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"get"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"()) }"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#6A737D"},children:"    //   ^^^^ -> `data` is moved into a closure here"},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#E1E4E8"},children:"    p { (data"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"."},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"get"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"()) }"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#6A737D"},children:"    //   ^^^^ -> ERROR: `data` already moved"},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#E1E4E8"},children:"}"},void 0,!1,void 0,this)},void 0,!1,void 0,this)]},void 0,!0,void 0,this)},void 0,!1,void 0,this),`
`,a("p",{children:["要解决这个问题，我们只能编写丑陋的代码，将数据 ",a("code",{children:"clone"},void 0,!1,void 0,this)," 到只一个变量中："]},void 0,!0,void 0,this),`
`,a("pre",{className:"shiki github-dark",style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0",children:a("code",{className:"language-rust",children:[a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"let"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" data "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:" Signal"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"::"},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"new"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"("},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"..."},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:");"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"let"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" data_cloned "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" data"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"."},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"clone"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"();"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#B392F0"},children:"view!"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" {"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#E1E4E8"},children:"    p { (data"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"."},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"get"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"()) }"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#6A737D"},children:"    //   ^^^^ -> `data` is moved into a closure here"},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#E1E4E8"},children:"    p { (data_cloned"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"."},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"get"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"()) }"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#6A737D"},children:"    //   ^^^^ -> Ok. We are using `data_cloned`, not `data`."},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#E1E4E8"},children:"}"},void 0,!1,void 0,this)},void 0,!1,void 0,this)]},void 0,!0,void 0,this)},void 0,!1,void 0,this),`
`,a("p",{children:"这样的实现奇丑无比。响应式系统在设计上应该是非常优雅，但是在 Rust 中实现时，它有一些意想不到的难题。"},void 0,!1,void 0,this),`
`,a("p",{children:a("strong",{children:"好消息是，在下一个版本中（v0.8）将修复这个问题。"},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("p",{children:["这个问题的核心是 ",a("code",{children:"Signal"},void 0,!1,void 0,this)," 内部使用了引用计数，闭包需要其为 ",a("code",{children:"'static"},void 0,!1,void 0,this),"，而且没有办法标记 ",a("code",{children:"Signal"},void 0,!1,void 0,this)," 的生命周期。大多数情况下，一系列 ",a("code",{children:"Signal"},void 0,!1,void 0,this)," 层层叠加会组成一座高塔，生命周期最长的在塔底，生命周期短的在更上层。这样也可以更好地应用 Rust 的借用检查器。"]},void 0,!0,void 0,this),`
`,a("p",{children:["使用新的响应式原语，",a("code",{children:"Signal"},void 0,!1,void 0,this)," 默认不再基于引用计数实现，而是与创建它的 Scope 的生命周期相关联。"]},void 0,!0,void 0,this),`
`,a("pre",{className:"shiki github-dark",style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0",children:a("code",{className:"language-rust",children:[a("span",{className:"line",children:a("span",{style:{color:"#6A737D"},children:"// 旧版本："},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"let"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" data "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:" Signal"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"::"},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"new"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"("},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"..."},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:");"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#6A737D"},children:"// 新版本："},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"let"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" data "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" ctx"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"."},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"create_signal"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"("},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"..."},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:");"},void 0,!1,void 0,this)]},void 0,!0,void 0,this)]},void 0,!0,void 0,this)},void 0,!1,void 0,this),`
`,a("p",{children:[a("code",{children:"ctx"},void 0,!1,void 0,this)," 指向当前响应式 ",a("code",{children:"Scope"},void 0,!1,void 0,this),"。在旧的方案中，响应式 ",a("code",{children:"Scope"},void 0,!1,void 0,this),"由内部的一套复杂、本地线程绑定的方案进行管理，而现在则改为显式的引用。这个改变非常重要，否则无法将将 ",a("code",{children:"Signal"},void 0,!1,void 0,this)," 关联到 ",a("code",{children:"Scope"},void 0,!1,void 0,this)," 中。"]},void 0,!0,void 0,this),`
`,a("p",{children:["那么，这个方案如何实现？答案就在 ",a("code",{children:"Signal::new"},void 0,!1,void 0,this)," 和 ",a("code",{children:"ctx.create_signal"},void 0,!1,void 0,this)," 的返回值中。"]},void 0,!0,void 0,this),`
`,a("p",{children:[a("code",{children:"Signal::new"},void 0,!1,void 0,this)," 返回了一个 ",a("code",{children:"Signal"},void 0,!1,void 0,this),"（只实现了 ",a("code",{children:"Clone"},void 0,!1,void 0,this),"，不能实现 ",a("code",{children:"Copy"},void 0,!1,void 0,this),"）。它在 ",a("code",{children:"Scope"},void 0,!1,void 0,this)," 中里的的工作方式类似于 ",a("a",{href:"https://en.wikipedia.org/wiki/Region-based_memory_management",children:"arena allocator"},void 0,!1,void 0,this),"。",a("code",{children:"Signal"},void 0,!1,void 0,this)," 在 ",a("code",{children:"Scope"},void 0,!1,void 0,this)," 中创建，并在内部的内存分配器分配空间，从而使用 ",a("code",{children:"Signal"},void 0,!1,void 0,this)," 与 ",a("code",{children:"Scope"},void 0,!1,void 0,this)," 有相同的生命周期。"]},void 0,!0,void 0,this),`
`,a("p",{children:["就是说，现在可以在各个闭包中使用 ",a("code",{children:"Signal"},void 0,!1,void 0,this),"，而且不需要 ",a("code",{children:"Clone"},void 0,!1,void 0,this),"。"]},void 0,!0,void 0,this),`
`,a("pre",{className:"shiki github-dark",style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0",children:a("code",{className:"language-rust",children:[a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"let"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" data "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" ctx"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"."},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"create_signal"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"("},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"..."},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:");"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"let"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" callback "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:" ||"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" data"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"."},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"get"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"();"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#6A737D"},children:"//             ^^ -> 现在已不需要 Clone"},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"let"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" another_callback "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:" ||"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" data"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"."},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"get"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"();"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#E1E4E8"},children:"ctx"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"."},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"create_effect"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"("},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"||"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" {"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#B392F0"},children:"    log"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"::"},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"info!"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"("},void 0,!1,void 0,this),a("span",{style:{color:"#9ECBFF"},children:'"{data}"'},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:");"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#E1E4E8"},children:"});"},void 0,!1,void 0,this)},void 0,!1,void 0,this)]},void 0,!0,void 0,this)},void 0,!1,void 0,this),`
`,a("p",{children:["显式使用 ",a("code",{children:"scope"},void 0,!1,void 0,this)," 也带来了另一个好处：可以直接支持 ",a("code",{children:"async"},void 0,!1,void 0,this),"/",a("code",{children:"await"},void 0,!1,void 0,this),"。在旧版本中这是不被支持的特性。原因是 ",a("code",{children:"async"},void 0,!1,void 0,this)," 破坏了代码的执行顺序。在调用 ",a("code",{children:".await"},void 0,!1,void 0,this)," 后，我们代码得知当前位于哪个 ",a("code",{children:"Scope"},void 0,!1,void 0,this),"。现在我们可以直接访问 ",a("code",{children:"ctx"},void 0,!1,void 0,this),"，这样可以实现更直观的业务逻辑。"]},void 0,!0,void 0,this),`
`,a("pre",{className:"shiki github-dark",style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0",children:a("code",{className:"language-rust",children:[a("span",{className:"line",children:a("span",{style:{color:"#E1E4E8"},children:"#[component]"},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"async"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:" fn"},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:" AsyncFetch"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"<"},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"G"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:":"},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:" Html"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:">(ctx"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:":"},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:" ScopeRef"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:") "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"->"},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:" View"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"<"},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"G"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"> {"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"    let"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" data "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:" fetch_data"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"()"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:".await"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:";"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"    let"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" derived "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" ctx"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"."},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"create_memo"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"("},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"||"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" data);"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#6A737D"},children:"    //            ^^^ -> We can still access `ctx`, even after the `.await` suspension point."},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#B392F0"},children:"    view!"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" {"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#E1E4E8"},children:"        (derived)"},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#E1E4E8"},children:"    }"},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#E1E4E8"},children:"}"},void 0,!1,void 0,this)},void 0,!1,void 0,this)]},void 0,!0,void 0,this)},void 0,!1,void 0,this),`
`,a("p",{children:["在 UI 中使用 ",a("code",{children:"suspense"},void 0,!1,void 0,this),"、",a("code",{children:"async"},void 0,!1,void 0,this)," 将有更好的开发体验。"]},void 0,!0,void 0,this),`
`,a("p",{children:"虽然有不少优点，但这个新方案也存在一些缺点。"},void 0,!1,void 0,this),`
`,a("p",{children:["第一点，arena allocators 只有在其创建的对象被销毁时才会释放内存。当 arena allocators 依然存在时，将无法释放内存。这意味着 ",a("code",{children:"Signal"},void 0,!1,void 0,this)," 的生命周长和 ",a("code",{children:"Scope"},void 0,!1,void 0,this)," 一样长，需要谨慎处理内存泄漏问题。比如在循环中多次使用 ",a("code",{children:"ctx.create_signal"},void 0,!1,void 0,this)," 创建对象。"]},void 0,!0,void 0,this),`
`,a("p",{children:["在一些场景下，需要使用一个基于引用计数的 ",a("code",{children:"RcSignal"},void 0,!1,void 0,this),"，用于覆盖使用旧 ",a("code",{children:"Signal"},void 0,!1,void 0,this)," 方案的一些场景。"]},void 0,!0,void 0,this),`
`,a("p",{children:["第二次点是 ",a("code",{children:"Signal"},void 0,!1,void 0,this)," 现在绑定到 ",a("code",{children:"Scope"},void 0,!1,void 0,this),"，",a("code",{children:"Signal"},void 0,!1,void 0,this)," 将无法超出 ",a("code",{children:"Scope"},void 0,!1,void 0,this)," 的生命周期。例如下面的代码，这些代码无法通过编译。"]},void 0,!0,void 0,this),`
`,a("pre",{className:"shiki github-dark",style:{backgroundColor:"#24292e",color:"#e1e4e8"},tabIndex:"0",children:a("code",{className:"language-rust",children:[a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"let"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:" mut"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" outer "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:" None"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:";"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#6A737D"},children:"// Crete a new reactive scope and allow access to it through `ctx`."},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#B392F0"},children:"create_scope"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"("},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"|"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"ctx"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"|"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" {"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#F97583"},children:"    let"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" data "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:" ctx"},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"."},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:"create_signal"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"("},void 0,!1,void 0,this),a("span",{style:{color:"#79B8FF"},children:"0"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:");"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:[a("span",{style:{color:"#E1E4E8"},children:"    outer "},void 0,!1,void 0,this),a("span",{style:{color:"#F97583"},children:"="},void 0,!1,void 0,this),a("span",{style:{color:"#B392F0"},children:" Some"},void 0,!1,void 0,this),a("span",{style:{color:"#E1E4E8"},children:"(data);"},void 0,!1,void 0,this)]},void 0,!0,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#6A737D"},children:"    //           ^^^^ -> ERROR: `data` cannot escape"},void 0,!1,void 0,this)},void 0,!1,void 0,this),`
`,a("span",{className:"line",children:a("span",{style:{color:"#E1E4E8"},children:"});"},void 0,!1,void 0,this)},void 0,!1,void 0,this)]},void 0,!0,void 0,this)},void 0,!1,void 0,this),`
`,a("p",{children:["这些场景可能需要 ",a("code",{children:"RcSignal"},void 0,!1,void 0,this),"。"]},void 0,!0,void 0,this),`
`,a("p",{children:["上面就是 Sycamore 新的响应式原语。如果需要尝试，请安装 ",a("code",{children:"v0.8"},void 0,!1,void 0,this)," beta 版本。这个版本包含了一些破坏性更新，除了新的响应式原语，也包括其他一些功能（比如函数组件的写法）。"]},void 0,!0,void 0,this),`
`,a("hr",{},void 0,!1,void 0,this),`
`,a("ul",{children:[`
`,a("li",{children:"2022 年 03 月 09 日，第一版"},void 0,!1,void 0,this),`
`,a("li",{children:"2022 年 03 月 12 日，修改部分文字"},void 0,!1,void 0,this),`
`,a("li",{children:"2022 年 05 月 01 日，修改部分文字，增加 0.8.0-beta.4 的说明"},void 0,!1,void 0,this),`
`]},void 0,!0,void 0,this)]},void 0,!0,void 0,this)},void 0,!1,void 0,this)}export{e as default};
